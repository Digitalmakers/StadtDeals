name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    paths-ignore: 
      - 'docs/**'
      - '*.md'
      - '.gitignore'

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: TypeScript type check
        run: npm run type-check
        
      - name: ESLint check
        run: npm run lint
        
      - name: Prettier format check
        run: npm run format:check
        
      - name: Security audit
        run: npm audit --audit-level=high
        
      - name: Bundle size analysis
        run: |
          npm run build:analyze
          npx bundlesize

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: true
          
      - name: Coverage threshold check
        run: |
          COVERAGE=$(npm run test:coverage:check --silent)
          if [ "$COVERAGE" -lt 80 ]; then
            echo "Coverage $COVERAGE% is below 80% threshold"
            exit 1
          fi

  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run component tests
        run: npm run test:components
        
      - name: Accessibility tests
        run: npm run test:a11y

  ios-build-check:
    name: iOS Build Verification
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          working-directory: ios
          
      - name: Install CocoaPods
        run: |
          cd ios
          pod install --repo-update
          
      - name: Build iOS (Debug)
        run: |
          npx react-native build-ios \
            --mode Debug \
            --simulator "iPhone 15 Pro"
            
      - name: iOS unit tests
        run: |
          cd ios
          xcodebuild test \
            -workspace StadtDeals.xcworkspace \
            -scheme StadtDeals \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro'

  android-build-check:
    name: Android Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install dependencies
        run: npm ci
        
      - name: Build Android (Debug)
        run: |
          cd android
          ./gradlew assembleDebug --no-daemon
          
      - name: Android unit tests
        run: |
          cd android
          ./gradlew testDebugUnitTest --no-daemon
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: android/app/build/outputs/apk/debug/
          retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'StadtDeals'
          path: '.'
          format: 'JSON'
          
      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-results
          path: reports/

  firebase-functions-check:
    name: Firebase Functions Validation
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'functions/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install functions dependencies  
        run: |
          cd functions
          npm ci
          
      - name: Functions TypeScript check
        run: |
          cd functions
          npm run build
          
      - name: Functions unit tests
        run: |
          cd functions
          npm test
          
      - name: Firebase rules validation
        run: |
          npm install -g firebase-tools
          firebase use --add default --project demo-stadtdeals
          firebase emulators:exec --only firestore "npm run test:firestore-rules"

  notification:
    name: PR Status Notification
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, component-tests, ios-build-check, android-build-check, security-scan]
    if: always()
    
    steps:
      - name: Notify team on failure
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Update PR with build status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            const success = !${{ contains(needs.*.result, 'failure') }};
            const status = success ? '✅ All checks passed' : '❌ Some checks failed';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## Build Status: ${status}\n\nView details in the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            });