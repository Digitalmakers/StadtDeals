name: iOS Build & Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment' 
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  XCODE_VERSION: '15.2'
  IOS_SIMULATOR: 'iPhone 15 Pro'

jobs:
  ios-build:
    name: iOS Build & Deploy
    runs-on: macos-14
    timeout-minutes: 60
    
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.environment)) || (startsWith(github.ref, 'refs/tags/') && '["production"]' || '["staging"]') }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          working-directory: ios
          
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
        
      - name: Install dependencies
        run: npm ci
        
      - name: Configure environment
        run: |
          # Set environment-specific configuration
          if [[ "${{ matrix.environment }}" == "production" ]]; then
            cp .env.production .env
            echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_PROD }}" >> .env
            echo "BUNDLE_ID=com.stadtdeals.app" >> .env
          else
            cp .env.staging .env  
            echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID_STAGING }}" >> .env
            echo "BUNDLE_ID=com.stadtdeals.app.staging" >> .env
          fi
          
      - name: Setup Firebase configuration
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_PLIST }}' > ios/GoogleService-Info.plist
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
          
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update
          
      - name: Setup code signing
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
        run: |
          cd ios
          bundle exec fastlane match appstore --readonly
          
      - name: Run tests
        if: ${{ !github.event.inputs.skip_tests }}
        run: |
          # Unit tests
          npm test -- --coverage --watchAll=false
          
          # iOS specific tests
          cd ios
          xcodebuild test \
            -workspace StadtDeals.xcworkspace \
            -scheme StadtDeals \
            -destination 'platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}' \
            -resultBundlePath TestResults.xcresult
            
      - name: Build iOS app
        env:
          ENVIRONMENT: ${{ matrix.environment }}
        run: |
          cd ios
          if [[ "${{ matrix.environment }}" == "production" ]]; then
            bundle exec fastlane build_production
          else
            bundle exec fastlane build_staging
          fi
          
      - name: Upload to TestFlight
        if: matrix.environment == 'staging'
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          cd ios
          bundle exec fastlane upload_testflight
          
      - name: Submit for App Store Review
        if: matrix.environment == 'production'
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          cd ios
          bundle exec fastlane submit_for_review
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ matrix.environment }}-${{ github.sha }}
          path: |
            ios/build/StadtDeals.ipa
            ios/TestResults.xcresult
          retention-days: 30
          
      - name: Update build number for next build
        if: matrix.environment == 'production'
        run: |
          # Increment build number in Info.plist
          cd ios/StadtDeals
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $(($(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" Info.plist) + 1))" Info.plist
          
          # Commit the change
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Info.plist
          git commit -m "Bump iOS build number [skip ci]" || exit 0
          git push
          
  notify-deployment:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [ios-build]
    if: always()
    
    steps:
      - name: Notify team on success
        if: needs.ios-build.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ iOS deployment successful!
            Environment: ${{ matrix.environment }}
            Build: ${{ github.sha }}
            TestFlight: Available for testing
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify team on failure
        if: needs.ios-build.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          text: |
            ‚ùå iOS deployment failed!
            Environment: ${{ matrix.environment }}
            Build: ${{ github.sha }}
            Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
  rollback-on-failure:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: [ios-build]
    if: failure() && matrix.environment == 'production'
    
    steps:
      - name: Trigger rollback
        run: |
          echo "Production deployment failed, initiating rollback procedure"
          # Add rollback logic here - could trigger previous version deployment
          curl -X POST "${{ secrets.ROLLBACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "platform": "ios",
              "environment": "production", 
              "action": "rollback",
              "failed_build": "${{ github.sha }}"
            }'